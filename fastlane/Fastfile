# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require 'active_support'
fastlane_require 'jira-ruby'

default_platform(:ios)

platform :ios do
	desc 'Configuration Required Parameters'
	before_all do |lane, options|
		@workspace = File.expand_path('../.')

		raise 'Project is required.' if options[:project].blank?
		raise 'Branch is required.' if options[:branch].blank?
		raise 'Version is required.' if options[:version].blank?

		@project = options[:project]
		@branch = options[:branch]
		@t_ver = options[:version]
		@project_workspace = "#{@workspace}/../#{@project}"
		@global_bat_folder = "#{@workspace}/../Release/#{@project}/#{@branch}/#{@t_ver}"

		@zip_name = options[:zip] unless options[:zip].blank?
		@operator = options[:operator] unless options[:operator].blank?
		@minio_bucket = options[:bucket] unless options[:bucket].blank?
		@framework = options[:framework] unless options[:framework].blank?
		@jira_key = options[:jira] unless options[:jira].blank?
	end

	desc 'Check Operational Legitimacy'
	lane :check_operation_legal do |options|
		# 1. Check the target folders exist
		# 2. Check the target version and sdk version
		raise "The folder: #{@global_bat_folder} not exist." unless File.exist?(@global_bat_folder) 
		raise "The folder: #{@project_workspace} not exist." unless File.exist?(@project_workspace)
		raise 'Framework was required to check the sdk status.' if @framework.blank?
		target_sdk_path = Find.find("#{@global_bat_folder}/SDK").filter { |path| File.basename(path) == "#{@framework}.framework" }.first
		raise "Can\' Find the target sdk with version: #{@t_ver}" unless File.exist?(target_sdk_path)
		raise "Version: #{@t_ver} doesn\'t match the sdk version." unless @t_ver.eql?("v#{project_sdk_version(target_sdk_path)}")
	end

	desc 'Add tag to project workspace.'
	lane :add_tag_to_project_branch do |options|
		raise "The folder: #{@project_workspace} not exist." unless File.exist?(@project_workspace)
		raise 'Operator was required to add git tag.' if @operator.blank?
		# Add tag to the branch.
		git_key_path = "#{@workspace}/../.ssh/#{@operator}_rsa"
		mob_add_tag_to_git(username: @operator, key_path: git_key_path, tag: @t_ver.gsub('v', ''), path: @project_workspace, push: false)
	end

	desc 'Update PodSpec'
	lane :update_podspec do |options|
		raise 'The zip file name prefix was required to archive bat folder.' if @zip_name.blank?
		raise 'The bucket name was required to upload zip file to minio server.' if @minio_bucket.blank?

		podspec_file_path = Find.find(@workspace).filter { |path| File.extname(path) == ".podspec" }.first
		raise 'Can\'t find the target podspec file.' unless File.exist?(podspec_file_path)
		# Update Podspec Version
		version_bump_podspec(path: podspec_file_path, version_number: @t_ver.gsub("v",""))
		# Update Podspec Download URL
		zip_file_download_url = "https://dev.ios.mob.com/files/download/#{@minio_bucket}/#{@zip_name}"
		update_podspec_file(podspec_file_path, zip_file_download_url)
	end

	desc 'Add Tag And Push To Repo'
	lane :add_and_push_to_repo do |options|
		raise 'perator was required to add git tag.' if @operator.blank?

		# 删除旧的内容
		['SDK', 'Sample'].filter { |name| File.exist?("#{@workspace}/#{name}") }.each { |name| FileUtils.rm_rf("#{@workspace}/#{name}") }
		# 添加新的内容
		['SDK', 'Sample'].filter { |name| File.exist?("#{@global_bat_folder}/#{name}") }.each { |name| FileUtils.cp_r("#{@global_bat_folder}/#{name}", @workspace) }
		
		git_key_path = "#{@workspace}/../.ssh/#{@operator}_rsa"
		mob_add_tag_to_git(username: @operator, key_path: git_key_path, tag: @t_ver, branch: @branch, path: @workspace, push: true)
	end

	desc 'Upload Zip File'
	lane :upload_zip_file_to_minio do |options|
		raise "The folder: #{@global_bat_folder} not exist." unless File.exist?(@global_bat_folder)
		raise 'Framework was required to locate the compressed folder.' if @framework.blank?
		raise 'The zip file name prefix was required to archive bat folder.' if @zip_name.blank?
		raise 'The bucket name was required to upload zip file to minio server.' if @minio_bucket.blank?

		target_sdk_path = Find.find("#{@global_bat_folder}/SDK").filter { |path| File.basename(path) == "#{@framework}.framework" }.first
    	# SDK文件打包
    	zip_file_path = "#{@global_bat_folder}/SDK"
    	zip(path: File.dirname(target_sdk_path), output_path: "#{zip_file_path}/#{@zip_name}", verbose: true)
    	# shell命令
    	cmds = []
    	cmds << "cd #{zip_file_path}"
    	cmds << "mc cp '#{@zip_name}' 'minio/#{@minio_bucket}'"
    	cmds << "rm -f '#{@zip_name}'"
    	Action.sh(cmds.join('&&'))
  	end

  	desc 'Upadte Pods Trunk'
  	lane :update_pods_trunk_server do |opetions|
  		podspec_file_path = Find.find(@workspace).filter { |path| File.extname(path) == ".podspec" }.first
		raise 'Can\'t find the target podspec file.' unless File.exist?(podspec_file_path)

  		cmds = []
    	cmds << "cd #{@workspace}"
    	cmds << "pod trunk push --verbose --allow-warnings"
    	Action.sh(cmds.join('&&'))
  	end

  	desc 'Add Comments To Jira'
  	lane :add_comments_to_jira do |options|
  		raise 'The zip file name prefix was required to archive bat folder.' if @zip_name.blank?
		raise 'The bucket name was required to upload zip file to minio server.' if @minio_bucket.blank?
		
  		raise 'Jira key was required to add comments.' if @jira_key.blank?
  		jira_config_file_path = "#{@workspace}/c_files/jira_config.yaml"
		raise 'Jira config file not found.' unless File.exist?(jira_config_file_path)

		jira_config = yml_file_manager(path: jira_config_file_path)
		raise 'Please make sure the jira config contents.' unless jira_config and jira_config['options']

		zip_file_download_url = "https://dev.ios.mob.com/files/download/#{@minio_bucket}/#{@zip_name}"

		client = JIRA::Client.new(jira_config["options"])

		issue = client.Issue.find(@jira_key)
		comment = issue.comments.build
		comment.save(
			:body => "#{@project}\'s repo update process have complete, The download url is #{zip_file_download_url}"
		)
  	end

	# Tools Method
	def project_sdk_version(sdk_path)
		raise 'Target SDK not exist.' unless !sdk_path.blank? and File.exist?(sdk_path)
		plist_path = Dir.glob("#{sdk_path}/*Info.plist").first
		`/usr/libexec/PlistBuddy -c "Print:CFBundleShortVersionString" #{plist_path}`.chomp
	end

	def update_podspec_file(path, download_url)
		raise "The file: #{path} not exist." unless !path.blank? and File.exist?(path)
		raise 'The download url was required.' if download_url.blank?
		# Define Regex
        variable_prefix = /\w+\./
        file_regex = /^(?<begin>[^#]*#{variable_prefix}source\s*=\s*\{\s*)(?<value>.*)(?<end>\s+\})/i
        # Read Podspec Content
        podspec_content = File.read(path)
        # Filter Podspec Content
        filter_match = file_regex.match(podspec_content)
        # Replace Content
        updated_podspec_content = podspec_content.gsub(file_regex, "#{filter_match[:begin]}:http => '#{download_url}'#{filter_match[:end]}")
		File.open(path, "w") { |file| file.puts(updated_podspec_content) }
		updated_podspec_content
	end
end